openapi: 3.0.0
info:
  title: MyDocs file management API
  description: A collaborative file management system with authentication and sharing capabilities
  version: 1.0.0
  contact:
    name: API Support

servers:
  - url: http://localhost:5000/api
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        role:
          type: string

    File:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        ownerId:
          type: string
        accessLevel:
          type: string
          enum: [owner, write, read]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateFileRequest:
      type: object
      properties:
        title:
          type: string
          example: "My Document"

    UpdateFileRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string

    ShareFileRequest:
      type: object
      required:
        - collaboratorEmail
      properties:
        collaboratorEmail:
          type: string
          format: email
          example: "user@example.com"
        permission:
          type: string
          enum: [read, write]
          default: write

    Collaborator:
      type: object
      properties:
        id:
          type: string
        fileId:
          type: string
        ownerId:
          type: string
        collaboratorId:
          type: string
        collaboratorEmail:
          type: string
        permission:
          type: string
          enum: [read, write]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

security:
  - BearerAuth: []

paths:
  /auth/token:
    post:
      tags:
        - Authentication
      summary: Exchange Firebase token for backend JWT
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Authorization:
                  type: string
                  description: Bearer token from Firebase
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request - missing or invalid authorization header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files:
    get:
      tags:
        - Files
      summary: Get all files for authenticated user
      responses:
        '200':
          description: List of user's files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Files
      summary: Create a new file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFileRequest'
      responses:
        '201':
          description: File created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  title:
                    type: string
                  ownerId:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files/{id}:
    get:
      tags:
        - Files
      summary: Get a specific file by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: File ID
      responses:
        '200':
          description: File details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '403':
          description: Unauthorized access to file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Files
      summary: Update a file
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: File ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFileRequest'
      responses:
        '200':
          description: File updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "File updated"
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Files
      summary: Delete a file
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: File ID
      responses:
        '204':
          description: File deleted successfully
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files/{id}/share:
    post:
      tags:
        - File Sharing
      summary: Share a file with another user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: File ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareFileRequest'
      responses:
        '200':
          description: File shared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          description: File not found or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files/{id}/collaborators:
    get:
      tags:
        - File Sharing
      summary: Get all collaborators for a file
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: File ID
      responses:
        '200':
          description: List of collaborators
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collaborator'
        '403':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files/{id}/collaborators/{collaboratorId}:
    delete:
      tags:
        - File Sharing
      summary: Remove a collaborator from a file
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: File ID
        - name: collaboratorId
          in: path
          required: true
          schema:
            type: string
          description: Collaborator ID to remove
      responses:
        '200':
          description: Collaborator removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          description: File or collaborator not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

tags:
  - name: Authentication
    description: Authentication endpoints
  - name: Files
    description: File management operations
  - name: File Sharing
    description: File collaboration and sharing operations
